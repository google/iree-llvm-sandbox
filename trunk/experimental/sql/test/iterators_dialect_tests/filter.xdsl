// RUN: rel_opt.py %s | filecheck %s

builtin.module() {
  func.func() ["sym_name" = "main", "function_type" = !fun<[], []>, "sym_visibility" = "public"] {
    %input : !iterators.stream<!llvm.struct<(!i32)>> = iterators.constantstream() ["value" = [[42 : !i32]]]
    %reduce : !iterators.stream<!llvm.struct<(!i32)>> = iterators.filter(%input : !iterators.stream<!llvm.struct<(!i32)>>) ["predicateRef" = @is_positive_struct]
    func.return()
  }
  func.func() ["sym_name" = "is_positive_struct", "function_type" = !fun<[!llvm.struct<(!i32)>], [!i1]>, "sym_visibility" = "private"] {
    ^0(%struct : !llvm.struct<(!i32)>):
      %i : !i32 = llvm.extractvalue(%struct : !llvm.struct<(!i32)>) ["position" = [0 : !index]]
      %zero  : !i32 = arith.constant() ["value" = 0 : !i32]
      %cmp : !i1= arith.cmpi(%i :!i32, %zero : !i32) ["predicate" = 4 : !i64]
      func.return(%cmp : !i1)
  }
}

//      CHECK: func.func() ["sym_name" = "main", "function_type" = !fun<[], []>, "sym_visibility" = "public"] {
// CHECK-NEXT:   %{{.*}} : !iterators.stream<!llvm.struct<(!i32)>> = iterators.constantstream() ["value" = [[42 : !i32]]]
// CHECK-NEXT:   %{{.*}} : !iterators.stream<!llvm.struct<(!i32)>> = iterators.filter(%{{.*}} : !iterators.stream<!llvm.struct<(!i32)>>) ["predicateRef" = @is_positive_struct]
// CHECK-NEXT:   func.return()
// CHECK-NEXT: }
// CHECK-NEXT: func.func() ["sym_name" = "is_positive_struct", "function_type" = !fun<[!llvm.struct<(!i32)>], [!i1]>, "sym_visibility" = "private"] {
// CHECK-NEXT:   ^0(%{{.*}} : !llvm.struct<(!i32)>):
// CHECK-NEXT:     %{{.*}} : !i32 = llvm.extractvalue(%{{.*}} : !llvm.struct<(!i32)>) ["position" = [0 : !index]]
// CHECK-NEXT:     %{{.*}} : !i32 = arith.constant() ["value" = 0 : !i32]
// CHECK-NEXT:     %{{.*}} : !i1 = arith.cmpi(%{{.*}} : !i32, %{{.*}} : !i32) ["predicate" = 4 : !i64]
// CHECK-NEXT:     func.return(%{{.*}} : !i1)
// CHECK-NEXT: }
