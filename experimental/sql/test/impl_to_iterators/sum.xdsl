// RUN: rel_opt.py -p impl-to-iterators %s | filecheck %s

module() {
    %0 : !rel_impl.bag<[!rel_impl.schema_element<"id", !rel_impl.int32>]> = rel_impl.full_table_scan() ["table_name" = "some_name"]
    %1 : !rel_impl.bag<[!rel_impl.schema_element<"id", !rel_impl.int32>]> = rel_impl.aggregate(%0 : !rel_impl.bag<[!rel_impl.schema_element<"id", !rel_impl.int32>]>) ["col_names" = ["id"], "functions" = ["sum"]]
}

//      CHECK: func.func() ["sym_name" = "main", "function_type" = !fun<[], []>, "sym_visibility" = "private"] {
// CHECK-NEXT:     %0 : !iterators.stream<!llvm.struct<"", [!i32]>> = iterators.constantstream() ["value" = [[0 : !i32], [1 : !i32], [2 : !i32], [3 : !i32]]]
// CHECK-NEXT:     %1 : !iterators.stream<!llvm.struct<"", [!i32]>> = iterators.reduce(%0 : !iterators.stream<!llvm.struct<"", [!i32]>>) ["reduceFuncRef" = @sum_struct]
// CHECK-NEXT:     iterators.sink(%1 : !iterators.stream<!llvm.struct<"", [!i32]>>)
// CHECK-NEXT:     func.return()
// CHECK-NEXT:   }
// CHECK-NEXT:   func.func() ["sym_name" = "sum_struct", "function_type" = !fun<[!llvm.struct<"", [!i32]>, !llvm.struct<"", [!i32]>], [!llvm.struct<"", [!i32]>]>, "sym_visibility" = "private"] {
// CHECK-NEXT:   ^0(%2 : !llvm.struct<"", [!i32]>, %3 : !llvm.struct<"", [!i32]>):
// CHECK-NEXT:     %lhsi : !i32 = llvm.extractvalue(%2 : !llvm.struct<"", [!i32]>) ["position" = [0 : !index]]
// CHECK-NEXT:     %rhsi : !i32 = llvm.extractvalue(%3 : !llvm.struct<"", [!i32]>) ["position" = [0 : !index]]
// CHECK-NEXT:     %i : !i32 = arith.addi(%lhsi : !i32, %rhsi : !i32)
// CHECK-NEXT:     %result : !llvm.struct<"", [!i32]> = llvm.insertvalue(%2 : !llvm.struct<"", [!i32]>, %i : !i32) ["position" = [0 : !index]]
// CHECK-NEXT:     func.return(%result : !llvm.struct<"", [!i32]>)
// CHECK-NEXT:   }
