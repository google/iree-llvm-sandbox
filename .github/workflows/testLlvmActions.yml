name: Test LLVM Github actions

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  version:
    name: LLVM version
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
      with:
        repository: 'llvm/llvm-project'
        ref: 'llvmorg-15.0.6'
    - name: Get LLVM version
      id: version
      uses: ingomueller-net/llvm-actions/get-llvm-version@main

  build:
    name: Build LLVM
    runs-on: ubuntu-20.04
    steps:
    - name: Install Ninja
      uses: ingomueller-net/llvm-actions/install-ninja@main
    - name: Download source code
      uses: ingomueller-net/llvm-actions//get-llvm-project-src@main
      with:
        ref: 'llvmorg-15.0.6'
        repo: 'llvm/llvm-project'
    - name: Configure
      run: |
        mkdir install
        cmake -B build -S llvm -G Ninja -DLLVM_ENABLE_PROJECTS=clang -DCMAKE_BUILD_TYPE=Debug -DLLVM_TARGETS_TO_BUILD="" -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_LINK_LLVM_DYLIB=ON -DCMAKE_C_FLAGS_DEBUG="-g1 -Og" -DCMAKE_CXX_FLAGS_DEBUG="-g1 -Og" -DCMAKE_INSTALL_PREFIX=`pwd`/install llvm
    - name: Build
      run: ninja -C build/

  windows:
    name: Build and Test on Windows
    runs-on: windows-2019
    steps:
      - name: Setup Windows
        uses: llvm/actions/setup-windows@main
        with:
          arch: amd64
      # On Windows, starting with win19/20220814.1, cmake choose the 32-bit
      # python3.10.6 libraries instead of the 64-bit libraries when building
      # lldb.  Using this setup-python action to make 3.10 the default
      # python fixes this.
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Ninja
        uses: llvm/actions/install-ninja@main
      # actions/checkout deletes any existing files in the new git directory,
      # so this needs to either run before ccache-action or it has to use
      # clean: false.
      - uses: actions/checkout@v3
        with:
          repository: 'llvm/llvm-project'
          ref: 'llvmorg-15.0.6'
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          # A full build of llvm, clang, lld, and lldb takes about 250MB
          # of ccache space. There's not much reason to have more than this,
          # because we usually won't need to save cache entries from older
          # builds.  Also, there is an overall 10GB cache limit, and each
          # run creates a new cache entry so we want to ensure that we have
          # enough cache space for all the tests to run at once and still
          # fit under the 10 GB limit.
          max-size: 500M
          key: sccache-windows-2019
          variant: sccache
      - name: Build and Test
        uses: llvm/actions/build-test-llvm-project@main
        env:
          # Workaround for https://github.com/actions/virtual-environments/issues/5900.
          # This should be a no-op for non-mac OSes
          PKG_CONFIG_PATH: /usr/local/Homebrew/Library/Homebrew/os/mac/pkgconfig//12
        with:
          cmake_args: '-GNinja -DLLVM_ENABLE_PROJECTS="${{ inputs.projects }}" -DCMAKE_BUILD_TYPE=Release -DLLDB_INCLUDE_TESTS=OFF -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache'
          build_target:  '${{ inputs.build_target }}'
